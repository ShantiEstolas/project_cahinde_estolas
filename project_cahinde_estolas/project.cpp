#include "Project.h"
#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <cmath>
#include <cstdlib>
#include <stdint.h>
#include <vector>
#define MAX 200000
#define LIMIT	1000
#define TARGET 500//problem no. 12
#define DIGIT_COUNT 256//problem no. 20



using namespace std;

vector <int> primes;
bool composite [MAX+1];


Project::Project()
{
	//ctor
}

Project::~Project()
{
	//dtor
}



	int  x[302];//for problem no. 16



void Project::multiple_3and5()//PROBLEM NO.1
{

	int num=1000, y=0;


	for (int i=1;i<num;++i)
	{

		if ((i%3==0 )|| (i%5==0))
		{

			y=y+i;

		}

	}
	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |  The sum of all the multiples of 3 or 5 below 1000 is "<<y<< " |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |**************************************************************|\n\n";
}

void Project::even_fibonacce()//PROBLEM NO.2
{
    long a = 1;
	long b = 2;
	long x = 0;
	long evenSum=2;


	while (a+b<4000000) {

		x = a + b;
		a = b;
		b = x;

		if (x%2==0)
			evenSum+=x;
	}
	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |          The sum of even value terms is "<< evenSum << "              |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |**************************************************************|\n\n";
}

void Project::largest_prime_factor()//PROBLEM NO.3
{
     long x=600851475143;

    for(int i=2;i<=sqrt(x);i++){
        while(x%i==0 && x!= i){
            x=x/i;
        }
    }
	 cout<<"\n\n\n       |**************************************************************|"<<endl;
	 cout<<"       |                                                              |"<<endl;
	 cout<<"       |  The largest prime factor of the number 600851475143 is "<< x << " |"<<endl;
	 cout<<"       |                                                              |"<<endl;
	 cout<<"       |                                                              |"<<endl;
	 cout<<"       |**************************************************************|\n\n";
}

void Project::largest_palindrome()//PROBLEM NO.4
{
    int answer = 0;

	for(unsigned int i = 999; i != 99; i--)
		for(unsigned int j = 999; j != 99; j--) {

			int product = i*j;
			stringstream mystr2;
			mystr2 << product;
			string mystr = mystr2.str();
			unsigned int length = mystr.length();
			bool check = true;
			for(unsigned int k = 0; k < length/2; k++)
				if(mystr[k] != mystr[(length-k)-1]) {

					check = false;
					break;

					}

				if(answer <= product && check)
					answer = product;
			}

	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |                     The Largest Palindrome                   | "<<endl;
	cout<<"       |    Made From The Product Of Two 3-digit Numbers is "<<answer <<"    |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |**************************************************************|\n\n";
}

void Project::smallest_multiple()//PROBLEM NO.5
{

    int num = 20, flag = 0;

    while(flag == 0) {
        if ((num%2) == 0 && (num%3) == 0 && (num%4) == 0    && (num%5) == 0 && (num%6) == 0
            && (num%7) == 0 && (num%8) == 0 && (num%9) == 0 && (num%10) == 0 && (num%11) == 0 && (num%12) ==0
            && (num%13) == 0 && (num%14) == 0 && (num%15) == 0 && (num%16) == 0 && (num%17) == 0 && (num%18)==0
            && (num%19) == 0    && (num%20) == 0)

        {
                flag =  1;
                cout<<"\n\n\n       |**************************************************************|"<<endl;
                cout<<"       |                                                              |"<<endl;
                cout<<"       |          The smallest positive number that is evenly         |"<<endl;
                cout<<"       |   divisible by all of the numbers from 1 to 20 is "<<num << "  |"<<endl;
                cout<<"       |                                                              |"<<endl;
                cout<<"       |                                                              |"<<endl;
                cout<<"       |**************************************************************|\n\n";
        }

        num++;
    }

}

void Project::sum_square_diff()//PROBLEM NO.6
{
    long sum1 = 0;
    long sum2 = 0;
    int diff = 0;

    for (int i=1; i != 101; i++)
    {
        sum1 = sum1 + (pow(i, 2));
    }

    for (int j=1; j != 101; j++)
    {
        sum2 = sum2 + j;
    }

    diff = (sum2*sum2) - sum1;
    cout<<"\n\n\n       |**************************************************************|"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |  The difference between the sum of the squares of the first  |"<<endl;
    cout<<"       |  one hundred natural numbers and the square of the sum is "<<"   |"<< endl;
    cout<<"       |                           "<<diff<< "                           |"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |**************************************************************|\n\n";

}

void Project::ten_th_1st_prime()//PROBLEM NO.7
{
    int counter = 0;
    for (int i=2; ; i++)
    {
        bool prime=true;
        for (int j=2; j*j<=i; j++)
        {
            if (i % j == 0)
            {
                prime=false;
                break;
            }
        }
        if(prime) {
            counter++;
			if (counter==10001) {
				cout<<"\n\n\n       |**************************************************************|"<<endl;
				cout<<"       |                                                              |"<<endl;
				cout<<"       |                The 10 001st prime number is "<< i << "           |"<<endl;
				cout<<"       |                                                              |"<<endl;
				cout<<"       |**************************************************************|\n\n";

				break;
			}
		}
    }
}


void Project::largest_product_in_series()//PROBLEM NO.8
{



	int product=0,n=0,prod=0,b=0,a=0,c=0,d=0,e=0;



string number = "73167176531330624919225119674426574742355349194934"
"96983520312774506326239578318016984801869478851843"
"85861560789112949495459501737958331952853208805511"
"12540698747158523863050715693290963295227443043557"
"66896648950445244523161731856403098711121722383113"
"62229893423380308135336276614282806444486645238749"
"30358907296290491560440772390713810515859307960866"
"70172427121883998797908792274921901699720888093776"
"65727333001053367881220235421809751254540594752243"
"52584907711670556013604839586446706324415722155397"
"53697817977846174064955149290862569321978468622482"
"83972241375657056057490261407972968652414535100474"
"82166370484403199890008895243450658541227588666881"
"16427171479924442928230863465674813919123162824586"
"17866458359124566529476545682848912883142607690042"
"24219022671055626321111109370544217506941658960408"
"07198403850962455444362981230987879927244284909188"
"84580156166097919133875499200524063689912560717606"
"05886116467109405077541002256983155200055935729725"
"71636269561882670428252483600823257530420752963450";


			while(n < 995 )
		{
					a=number[n];
					a=a-48;
					b=number[n+1];
					b=b-48;
					c=number[n+2];
					c=c-48;
					d=number[n+3];
					d=d-48;
					e=number[n+4];
					e=e-48;
					prod =a*b*c*d*e;
				if(prod>product)
					{
						product = prod;
					}
				n++;
		}
		cout<<"\n\n\n       |**************************************************************|"<<endl;
		cout<<"       |                                                              |"<<endl;
		cout<<"       |  The greatest product of five consecutive digits in the 1000 |"<<endl;
		cout<<"       |        digit number of the following numbers is "<<product<<"        |"<<endl;
		cout<<"       |                                                              |"<<endl;
		cout<<"       |      73167176531330624919225119674426574742355349194934      |"<<endl;
		cout<<"       |      96983520312774506326239578318016984801869478851843      |"<<endl;
		cout<<"       |      85861560789112949495459501737958331952853208805511      |"<<endl;
		cout<<"       |      12540698747158523863050715693290963295227443043557      |"<<endl;
		cout<<"       |      66896648950445244523161731856403098711121722383113      |"<<endl;
		cout<<"       |      62229893423380308135336276614282806444486645238749      |"<<endl;
		cout<<"       |      30358907296290491560440772390713810515859307960866      |"<<endl;
		cout<<"       |      70172427121883998797908792274921901699720888093776      |"<<endl;
		cout<<"       |      65727333001053367881220235421809751254540594752243      |"<<endl;
		cout<<"       |      52584907711670556013604839586446706324415722155397      |"<<endl;
		cout<<"       |      53697817977846174064955149290862569321978468622482      |"<<endl;
		cout<<"       |      83972241375657056057490261407972968652414535100474      |"<<endl;
		cout<<"       |      82166370484403199890008895243450658541227588666881      |"<<endl;
		cout<<"       |      16427171479924442928230863465674813919123162824586      |"<<endl;
		cout<<"       |      17866458359124566529476545682848912883142607690042      |"<<endl;
		cout<<"       |      24219022671055626321111109370544217506941658960408      |"<<endl;
		cout<<"       |      07198403850962455444362981230987879927244284909188      |"<<endl;
		cout<<"       |      84580156166097919133875499200524063689912560717606      |"<<endl;
		cout<<"       |      05886116467109405077541002256983155200055935729725      |"<<endl;
		cout<<"       |      71636269561882670428252483600823257530420752963450      |"<<endl;
		cout<<"       |**************************************************************|\n\n";


}

void Project::special_pytho_triplet()//PROBLEM NO.9
{
	int a = 0, b = 0, c = 0, sum = 1000, product;
	bool test = false;

	for (a = 1; a < sum / 3 && !test; a++)
		{
			for (b = a; b < sum / 2 && !test; b++)
				{
					c = sum - a - b;

					if ((a*a) + (b*b) == (c*c) )
							{
								test = true;
								product=a*b*c;
								cout<<"\n\n\n       |**************************************************************|"<<endl;
								cout<<"       |                                                              |"<<endl;
								cout<<"       |       One Pythagorean triplet for which a + b + c = 1000.    |"<<endl;
								cout<<"       |                  The product of abc is "<<product<<"              |"<<endl;
								cout<<"       |                                                              |"<<endl;
								cout<<"       |**************************************************************|\n\n";
								break;
							}
				}
		}
}


void Project::summation_of_primes()//PROBLEM NO.10
{
    long num = 2000000;
    long long x = 0;
    long long i;
    for (i=2; i<num; i++)
    {
        bool prime=true;
        for (int j=2; j*j<=i; j++)
        {
            if (i % j == 0)
            {
                prime=false;
                break;
            }
        }
        if(prime) {

            x=x+i;
		}
    }
    cout<<"\n\n\n       |**************************************************************|"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |  The sum of all the primes below two million is "<< x << " |"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |**************************************************************|\n\n";
}


void Project::largest_product_grid() //PROBLEM NO.11
{
    int n,m,productd=0, producth=0, productv=0, products=0, temp=0;
    int num[20][20] = {{ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8},
                        {49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0},
                        {81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65},
                        {52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91},
                        {22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80},
                        {24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50},
                        {32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70},
                        {67,26,20,68,02,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21},
                        {24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72},
                        {21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95},
                        {78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92},
                        {16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57},
                        {86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58},
                        {19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40},
                        { 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66},
                        {88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69},
                        { 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36},
                        {20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16},
                        {20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54},
                        { 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48}};

    for(m=0;m<17;m++)
    {
        for(n=0;n<17;n++)
        {
                productd=(num[n][m]*num[n+1][m+1]*num[n+2][m+2]*num[n+3][m+3]);
                products=(num[n+3][m]*num[n+2][m+1]*num[n+1][m+2]*num[n][m+3]);
                producth=(num[n][m]*num[n][m+1]*num[n][m+2]*num[n][m+3]);
                productv=(num[n][m]*num[n+1][m]*num[n+2][m]*num[n+3][m]);


            if(productd>=temp)
                temp = productd;
            if(producth>=temp)
                temp = producth;
            if(products>=temp)
                temp = products;
            if(productv>=temp)
                temp = productv;
        }
    }
    cout<<"\n\n\n       |**************************************************************|"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |      The greatest product of four adjacent numbers in the    |"<<endl;
    cout<<"       |     same direction (up, down, left, right, or diagonally)    |"<<endl;
    cout<<"       |                in the 20 by 20 grid is "<<temp<<"              |"<<endl;
    cout<<"       |**************************************************************|\n\n";

}

void Project::divisible_triangular_number() //PROBLEM NO.12
{
	    int divisors = 2;
	    int i = 7;
	    int limit;


	    unsigned int triangle = 28;


	    while ( divisors <= TARGET )
		{
			divisors = 2;
			i++;


			triangle += i;
			limit = sqrt(triangle);

			int j;


			for (j = 2; j <= limit; j++)
			{
				if (!(triangle % j))
				{
					if (j == limit)
						divisors++;
					else
						divisors += 2;
				}
			}
		}



	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |     The first triangle number with 500 or more divisors is   |"<<endl;
	cout<<"       |                          "<< triangle<<"                            |"<<endl;
	cout<<"       |**************************************************************|\n\n";

}

void Project::largest_sum()//PROBLEM NO.13
{

    long long num = 0;
    long long carry[50] = {0},answer[50] = {0};
    int row = 49,column = 49;

    int digits[100][50] = {
{  3, 7 ,1, 0, 7, 2, 8, 7, 5, 3, 3, 9, 0, 2, 1, 0, 2, 7, 9, 8, 7, 9, 7, 9, 9, 8, 2, 2, 0, 8, 3, 7, 5, 9, 0, 2, 4, 6, 5, 1, 0, 1, 3, 5, 7, 4, 0, 2, 5, 0} ,
{  4, 6, 3, 7, 6, 9, 3, 7, 6, 7, 7, 4, 9, 0, 0, 0, 9, 7, 1, 2, 6, 4, 8, 1, 2, 4, 8, 9, 6, 9, 7, 0, 0, 7, 8, 0, 5, 0, 4, 1, 7, 0, 1, 8, 2, 6, 0, 5, 3, 8}  ,
{  7, 4, 3, 2, 4, 9, 8, 6, 1, 9, 9, 5, 2, 4, 7, 4, 1, 0, 5, 9, 4, 7, 4, 2, 3, 3, 3, 0, 9, 5, 1, 3, 0, 5, 8, 1, 2, 3, 7, 2, 6, 6, 1, 7, 3, 0, 9, 6, 2, 9}  ,
{  9, 1, 9, 4, 2, 2, 1, 3, 3, 6, 3, 5, 7, 4, 1, 6, 1, 5, 7, 2, 5, 2, 2, 4, 3, 0, 5, 6, 3, 3, 0, 1, 8, 1, 1, 0, 7, 2, 4, 0, 6, 1, 5, 4, 9, 0, 8, 2, 5, 0}  ,
{  2, 3, 0, 6, 7, 5, 8, 8, 2, 0, 7, 5, 3, 9, 3, 4, 6, 1, 7, 1, 1, 7, 1, 9, 8, 0, 3, 1, 0, 4, 2, 1, 0, 4, 7, 5, 1, 3, 7, 7, 8, 0, 6, 3, 2, 4, 6, 6, 7, 6}  ,
{  8, 9, 2, 6, 1, 6, 7, 0, 6, 9, 6, 6, 2, 3, 6, 3, 3, 8, 2, 0, 1, 3, 6, 3, 7, 8, 4, 1, 8, 3, 8, 3, 6, 8, 4, 1, 7, 8, 7, 3, 4, 3, 6, 1, 7, 2, 6, 7, 5, 7}  ,
{  2, 8, 1, 1, 2, 8, 7, 9, 8, 1, 2, 8, 4, 9, 9, 7, 9, 4, 0, 8, 0, 6, 5, 4, 8, 1, 9, 3, 1, 5, 9, 2, 6, 2, 1, 6, 9, 1, 2, 7, 5, 8, 8, 9, 8, 3, 2, 7, 3, 8}  ,
{  4, 4, 2, 7, 4, 2, 2, 8, 9, 1, 7, 4, 3, 2, 5, 2, 0, 3, 2, 1, 9, 2, 3, 5, 8, 9, 4, 2, 2, 8, 7, 6, 7, 9, 6, 4, 8, 7, 6, 7, 0, 2, 7, 2, 1, 8, 9, 3, 1, 8}  ,
{  4, 7, 4, 5, 1, 4, 4, 5, 7, 3, 6, 0, 0, 1, 3, 0, 6, 4, 3, 9, 0, 9, 1, 1, 6, 7, 2, 1, 6, 8, 5, 6, 8, 4, 4, 5, 8, 8, 7, 1, 1, 6, 0, 3, 1, 5, 3, 2, 7, 6}  ,
{  7, 0, 3, 8, 6, 4, 8, 6, 1, 0, 5, 8, 4, 3, 0, 2, 5, 4, 3, 9, 9, 3, 9, 6, 1, 9, 8, 2, 8, 9, 1, 7, 5, 9, 3, 6, 6, 5, 6, 8, 6, 7, 5, 7, 9, 3, 4, 9, 5, 1}  ,
{  6, 2, 1, 7, 6, 4, 5, 7, 1, 4, 1, 8, 5, 6, 5, 6, 0, 6, 2, 9, 5, 0, 2, 1, 5, 7, 2, 2, 3, 1, 9, 6, 5, 8, 6, 7, 5, 5, 0, 7, 9, 3, 2, 4, 1, 9, 3, 3, 3, 1}  ,
{  6, 4, 9, 0, 6, 3, 5, 2, 4, 6, 2, 7, 4, 1, 9, 0, 4, 9, 2, 9, 1, 0, 1, 4, 3, 2, 4, 4, 5, 8, 1, 3, 8, 2, 2, 6, 6, 3, 3, 4, 7, 9, 4, 4, 7, 5, 8, 1, 7, 8}  ,
{  9, 2, 5, 7, 5, 8, 6, 7, 7, 1, 8, 3, 3, 7, 2, 1, 7, 6, 6, 1, 9, 6, 3, 7, 5, 1, 5, 9, 0, 5, 7, 9, 2, 3, 9, 7, 2, 8, 2, 4, 5, 5, 9, 8, 8, 3, 8, 4, 0, 7}  ,
{  5, 8, 2, 0, 3, 5, 6, 5, 3, 2, 5, 3, 5, 9, 3, 9, 9, 0, 0, 8, 4, 0, 2, 6, 3, 3, 5, 6, 8, 9, 4, 8, 8, 3, 0, 1, 8, 9, 4, 5, 8, 6, 2, 8, 2, 2, 7, 8, 2, 8}  ,
{  8, 0, 1, 8, 1, 1, 9, 9, 3, 8, 4, 8, 2, 6, 2, 8, 2, 0, 1, 4, 2, 7, 8, 1, 9, 4, 1, 3, 9, 9, 4, 0, 5, 6, 7, 5, 8, 7, 1, 5, 1, 1, 7, 0, 0, 9, 4, 3, 9, 0}  ,
{  3, 5, 3, 9, 8, 6, 6, 4, 3, 7, 2, 8, 2, 7, 1, 1, 2, 6, 5, 3, 8, 2, 9, 9, 8, 7, 2, 4, 0, 7, 8, 4, 4, 7, 3, 0, 5, 3, 1, 9, 0, 1, 0, 4, 2, 9, 3, 5, 8, 6}  ,
{  8, 6, 5, 1, 5, 5, 0, 6, 0, 0, 6, 2, 9, 5, 8, 6, 4, 8, 6, 1, 5, 3, 2, 0, 7, 5, 2, 7, 3, 3, 7, 1, 9, 5, 9, 1, 9, 1, 4, 2, 0, 5, 1, 7, 2, 5, 5, 8, 2, 9}  ,
{  7, 1, 6, 9, 3, 8, 8, 8, 7, 0, 7, 7, 1, 5, 4, 6, 6, 4, 9, 9, 1, 1, 5, 5, 9, 3, 4, 8, 7, 6, 0, 3, 5, 3, 2, 9, 2, 1, 7, 1, 4, 9, 7, 0, 0, 5, 6, 9, 3, 8}  ,
{  5, 4, 3, 7, 0, 0, 7, 0, 5, 7, 6, 8, 2, 6, 6, 8, 4, 6, 2, 4, 6, 2, 1, 4, 9, 5, 6, 5, 0, 0, 7, 6, 4, 7, 1, 7, 8, 7, 2, 9, 4, 4, 3, 8, 3, 7, 7, 6, 0, 4}  ,
{  5, 3, 2, 8, 2, 6, 5, 4, 1, 0, 8, 7, 5, 6, 8, 2, 8, 4, 4, 3, 1, 9, 1, 1, 9, 0, 6, 3, 4, 6, 9, 4, 0, 3, 7, 8, 5, 5, 2, 1, 7, 7, 7, 9, 2, 9, 5, 1, 4, 5}  ,
{  3, 6, 1, 2, 3, 2, 7, 2, 5, 2, 5, 0, 0, 0, 2, 9, 6, 0, 7, 1, 0, 7, 5, 0, 8, 2, 5, 6, 3, 8, 1, 5, 6, 5, 6, 7, 1, 0, 8, 8, 5, 2, 5, 8, 3, 5, 0, 7, 2, 1}  ,
{  4, 5, 8, 7, 6, 5, 7, 6, 1, 7, 2, 4, 1, 0, 9, 7, 6, 4, 4, 7, 3, 3, 9, 1, 1, 0, 6, 0, 7, 2, 1, 8, 2, 6, 5, 2, 3, 6, 8, 7, 7, 2, 2, 3, 6, 3, 6, 0, 4, 5}  ,
{  1, 7, 4, 2, 3, 7, 0, 6, 9, 0, 5, 8, 5, 1, 8, 6, 0, 6, 6, 0, 4, 4, 8, 2, 0, 7, 6, 2, 1, 2, 0, 9, 8, 1, 3, 2, 8, 7, 8, 6, 0, 7, 3, 3, 9, 6, 9, 4, 1, 2}  ,
{  8, 1, 1, 4, 2, 6, 6, 0, 4, 1, 8, 0, 8, 6, 8, 3, 0, 6, 1, 9, 3, 2, 8, 4, 6, 0, 8, 1, 1, 1, 9, 1, 0, 6, 1, 5, 5, 6, 9, 4, 0, 5, 1, 2, 6, 8, 9, 6, 9, 2}  ,
{  5, 1, 9, 3, 4, 3, 2, 5, 4, 5, 1, 7, 2, 8, 3, 8, 8, 6, 4, 1, 9, 1, 8, 0, 4, 7, 0, 4, 9, 2, 9, 3, 2, 1, 5, 0, 5, 8, 6, 4, 2, 5, 6, 3, 0, 4, 9, 4, 8, 3}  ,
{  6, 2, 4, 6, 7, 2, 2, 1, 6, 4, 8, 4, 3, 5, 0, 7, 6, 2, 0, 1, 7, 2, 7, 9, 1, 8, 0, 3, 9, 9, 4, 4, 6, 9, 3, 0, 0, 4, 7, 3, 2, 9, 5, 6, 3, 4, 0, 6, 9, 1}  ,
{  1, 5, 7, 3, 2, 4, 4, 4, 3, 8, 6, 9, 0, 8, 1, 2, 5, 7, 9, 4, 5, 1, 4, 0, 8, 9, 0, 5, 7, 7, 0, 6, 2, 2, 9, 4, 2, 9, 1, 9, 7, 1, 0, 7, 9, 2, 8, 2, 0, 9}  ,
{  5, 5, 0, 3, 7, 6, 8, 7, 5, 2, 5, 6, 7, 8, 7, 7, 3, 0, 9, 1, 8, 6, 2, 5, 4, 0, 7, 4, 4, 9, 6, 9, 8, 4, 4, 5, 0, 8, 3, 3, 0, 3, 9, 3, 6, 8, 2, 1, 2, 6}  ,
{  1, 8, 3, 3, 6, 3, 8, 4, 8, 2, 5, 3, 3, 0, 1, 5, 4, 6, 8, 6, 1, 9, 6, 1, 2, 4, 3, 4, 8, 7, 6, 7, 6, 8, 1, 2, 9, 7, 5, 3, 4, 3, 7, 5, 9, 4, 6, 5, 1, 5}  ,
{  8, 0, 3, 8, 6, 2, 8, 7, 5, 9, 2, 8, 7, 8, 4, 9, 0, 2, 0, 1, 5, 2, 1, 6, 8, 5, 5, 5, 4, 8, 2, 8, 7, 1, 7, 2, 0, 1, 2, 1, 9, 2, 5, 7, 7, 6, 6, 9, 5, 4}  ,
{  7, 8, 1, 8, 2, 8, 3, 3, 7, 5, 7, 9, 9, 3, 1, 0, 3, 6, 1, 4, 7, 4, 0, 3, 5, 6, 8, 5, 6, 4, 4, 9, 0, 9, 5, 5, 2, 7, 0, 9, 7, 8, 6, 4, 7, 9, 7, 5, 8, 1}  ,
{  1, 6, 7, 2, 6, 3, 2, 0, 1, 0, 0, 4, 3, 6, 8, 9, 7, 8, 4, 2, 5, 5, 3, 5, 3, 9, 9, 2, 0, 9, 3, 1, 8, 3, 7, 4, 4, 1, 4, 9, 7, 8, 0, 6, 8, 6, 0, 9, 8, 4}  ,
{  4, 8, 4, 0, 3, 0, 9, 8, 1, 2, 9, 0, 7, 7, 7, 9, 1, 7, 9, 9, 0, 8, 8, 2, 1, 8, 7, 9, 5, 3, 2, 7, 3, 6, 4, 4, 7, 5, 6, 7, 5, 5, 9, 0, 8, 4, 8, 0, 3, 0}  ,
{  8, 7, 0, 8, 6, 9, 8, 7, 5, 5, 1, 3, 9, 2, 7, 1, 1, 8, 5, 4, 5, 1, 7, 0, 7, 8, 5, 4, 4, 1, 6, 1, 8, 5, 2, 4, 2, 4, 3, 2, 0, 6, 9, 3, 1, 5, 0, 3, 3, 2}  ,
{  5, 9, 9, 5, 9, 4, 0, 6, 8, 9, 5, 7, 5, 6, 5, 3, 6, 7, 8, 2, 1, 0, 7, 0, 7, 4, 9, 2, 6, 9, 6, 6, 5, 3, 7, 6, 7, 6, 3, 2, 6, 2, 3, 5, 4, 4, 7, 2, 1, 0}  ,
{  6, 9, 7, 9, 3, 9, 5, 0, 6, 7, 9, 6, 5, 2, 6, 9, 4, 7, 4, 2, 5, 9, 7, 7, 0, 9, 7, 3, 9, 1, 6, 6, 6, 9, 3, 7, 6, 3, 0, 4, 2, 6, 3, 3, 9, 8, 7, 0, 8, 5}  ,
{  4, 1, 0, 5, 2, 6, 8, 4, 7, 0, 8, 2, 9, 9, 0, 8, 5, 2, 1, 1, 3, 9, 9, 4, 2, 7, 3, 6, 5, 7, 3, 4, 1, 1, 6, 1, 8, 2, 7, 6, 0, 3, 1, 5, 0, 0, 1, 2, 7, 1}  ,
{  6, 5, 3, 7, 8, 6, 0, 7, 3, 6, 1, 5, 0, 1, 0, 8, 0, 8, 5, 7, 0, 0, 9, 1, 4, 9, 9, 3, 9, 5, 1, 2, 5, 5, 7, 0, 2, 8, 1, 9, 8, 7, 4, 6, 0, 0, 4, 3, 7, 5}  ,
{  3, 5, 8, 2, 9, 0, 3, 5, 3, 1, 7, 4, 3, 4, 7, 1, 7, 3, 2, 6, 9, 3, 2, 1, 2, 3, 5, 7, 8, 1, 5, 4, 9, 8, 2, 6, 2, 9, 7, 4, 2, 5, 5, 2, 7, 3, 7, 3, 0, 7}  ,
{  9, 4, 9, 5, 3, 7, 5, 9, 7, 6, 5, 1, 0, 5, 3, 0, 5, 9, 4, 6, 9, 6, 6, 0, 6, 7, 6, 8, 3, 1, 5, 6, 5, 7, 4, 3, 7, 7, 1, 6, 7, 4, 0, 1, 8, 7, 5, 2, 7, 5}  ,
{  8, 8, 9, 0, 2, 8, 0, 2, 5, 7, 1, 7, 3, 3, 2, 2, 9, 6, 1, 9, 1, 7, 6, 6, 6, 8, 7, 1, 3, 8, 1, 9, 9, 3, 1, 8, 1, 1, 0, 4, 8, 7, 7, 0, 1, 9, 0, 2, 7, 1}  ,
{  2, 5, 2, 6, 7, 6, 8, 0, 2, 7, 6, 0, 7, 8, 0, 0, 3, 0, 1, 3, 6, 7, 8, 6, 8, 0, 9, 9, 2, 5, 2, 5, 4, 6, 3, 4, 0, 1, 0, 6, 1, 6, 3, 2, 8, 6, 6, 5, 2, 6}  ,
{  3, 6, 2, 7, 0, 2, 1, 8, 5, 4, 0, 4, 9, 7, 7, 0, 5, 5, 8, 5, 6, 2, 9, 9, 4, 6, 5, 8, 0, 6, 3, 6, 2, 3, 7, 9, 9, 3, 1, 4, 0, 7, 4, 6, 2, 5, 5, 9, 6, 2}  ,
{  2, 4, 0, 7, 4, 4, 8, 6, 9, 0, 8, 2, 3, 1, 1, 7, 4, 9, 7, 7, 7, 9, 2, 3, 6, 5, 4, 6, 6, 2, 5, 7, 2, 4, 6, 9, 2, 3, 3, 2, 2, 8, 1, 0, 9, 1, 7, 1, 4, 1}  ,
{  9, 1, 4, 3, 0, 2, 8, 8, 1, 9, 7, 1, 0, 3, 2, 8, 8, 5, 9, 7, 8, 0, 6, 6, 6, 9, 7, 6, 0, 8, 9, 2, 9, 3, 8, 6, 3, 8, 2, 8, 5, 0, 2, 5, 3, 3, 3, 4, 0, 3}  ,
{  3, 4, 4, 1, 3, 0, 6, 5, 5, 7, 8, 0, 1, 6, 1, 2, 7, 8, 1, 5, 9, 2, 1, 8, 1, 5, 0, 0, 5, 5, 6, 1, 8, 6, 8, 8, 3, 6, 4, 6, 8, 4, 2, 0, 0, 9, 0, 4, 7, 0}  ,
{  2, 3, 0, 5, 3, 0, 8, 1, 1, 7, 2, 8, 1, 6, 4, 3, 0, 4, 8, 7, 6, 2, 3, 7, 9, 1, 9, 6, 9, 8, 4, 2, 4, 8, 7, 2, 5, 5, 0, 3, 6, 6, 3, 8, 7, 8, 4, 5, 8, 3}  ,
{  1, 1, 4, 8, 7, 6, 9, 6, 9, 3, 2, 1, 5, 4, 9, 0, 2, 8, 1, 0, 4, 2, 4, 0, 2, 0, 1, 3, 8, 3, 3, 5, 1, 2, 4, 4, 6, 2, 1, 8, 1, 4, 4, 1, 7, 7, 3, 4, 7, 0}  ,
{  6, 3, 7, 8, 3, 2, 9, 9, 4, 9, 0, 6, 3, 6, 2, 5, 9, 6, 6, 6, 4, 9, 8, 5, 8, 7, 6, 1, 8, 2, 2, 1, 2, 2, 5, 2, 2, 5, 5, 1, 2, 4, 8, 6, 7, 6, 4, 5, 3, 3}  ,
{  6, 7, 7, 2, 0, 1, 8, 6, 9, 7, 1, 6, 9, 8, 5, 4, 4, 3, 1, 2, 4, 1, 9, 5, 7, 2, 4, 0, 9, 9, 1, 3, 9, 5, 9, 0, 0, 8, 9, 5, 2, 3, 1, 0, 0, 5, 8, 8, 2, 2}  ,
{  9, 5, 5, 4, 8, 2, 5, 5, 3, 0, 0, 2, 6, 3, 5, 2, 0, 7, 8, 1, 5, 3, 2, 2, 9, 6, 7, 9, 6, 2, 4, 9, 4, 8, 1, 6, 4, 1, 9, 5, 3, 8, 6, 8, 2, 1, 8, 7, 7, 4}  ,
{  7, 6, 0, 8, 5, 3, 2, 7, 1, 3, 2, 2, 8, 5, 7, 2, 3, 1, 1, 0, 4, 2, 4, 8, 0, 3, 4, 5, 6, 1, 2, 4, 8, 6, 7, 6, 9, 7, 0, 6, 4, 5, 0, 7, 9, 9, 5, 2, 3, 6}  ,
{  3, 7, 7, 7, 4, 2, 4, 2, 5, 3, 5, 4, 1, 1, 2, 9, 1, 6, 8, 4, 2, 7, 6, 8, 6, 5, 5, 3, 8, 9, 2, 6, 2, 0, 5, 0, 2, 4, 9, 1, 0, 3, 2, 6, 5, 7, 2, 9, 6, 7}  ,
{  2, 3, 7, 0, 1, 9, 1, 3, 2, 7, 5, 7, 2, 5, 6, 7, 5, 2, 8, 5, 6, 5, 3, 2, 4, 8, 2, 5, 8, 2, 6, 5, 4, 6, 3, 0, 9, 2, 2, 0, 7, 0, 5, 8, 5, 9, 6, 5, 2, 2}  ,
{  2, 9, 7, 9, 8, 8, 6, 0, 2, 7, 2, 2, 5, 8, 3, 3, 1, 9, 1, 3, 1, 2, 6, 3, 7, 5, 1, 4, 7, 3, 4, 1, 9, 9, 4, 8, 8, 9, 5, 3, 4, 7, 6, 5, 7, 4, 5, 5, 0, 1}  ,
{  1, 8, 4, 9, 5, 7, 0, 1, 4, 5, 4, 8, 7, 9, 2, 8, 8, 9, 8, 4, 8, 5, 6, 8, 2, 7, 7, 2, 6, 0, 7, 7, 7, 1, 3, 7, 2, 1, 4, 0, 3, 7, 9, 8, 8, 7, 9, 7, 1, 5}  ,
{  3, 8, 2, 9, 8, 2, 0, 3, 7, 8, 3, 0, 3, 1, 4, 7, 3, 5, 2, 7, 7, 2, 1, 5, 8, 0, 3, 4, 8, 1, 4, 4, 5, 1, 3, 4, 9, 1, 3, 7, 3, 2, 2, 6, 6, 5, 1, 3, 8, 1}  ,
{  3, 4, 8, 2, 9, 5, 4, 3, 8, 2, 9, 1, 9, 9, 9, 1, 8, 1, 8, 0, 2, 7, 8, 9, 1, 6, 5, 2, 2, 4, 3, 1, 0, 2, 7, 3, 9, 2, 2, 5, 1, 1, 2, 2, 8, 6, 9, 5, 3, 9}  ,
{  4, 0, 9, 5, 7, 9, 5, 3, 0, 6, 6, 4, 0, 5, 2, 3, 2, 6, 3, 2, 5, 3, 8, 0, 4, 4, 1, 0, 0, 0, 5, 9, 6, 5, 4, 9, 3, 9, 1, 5, 9, 8, 7, 9, 5, 9, 3, 6, 3, 5}  ,
{  2, 9, 7, 4, 6, 1, 5, 2, 1, 8, 5, 5, 0, 2, 3, 7, 1, 3, 0, 7, 6, 4, 2, 2, 5, 5, 1, 2, 1, 1, 8, 3, 6, 9, 3, 8, 0, 3, 5, 8, 0, 3, 8, 8, 5, 8, 4, 9, 0, 3}  ,
{  4, 1, 6, 9, 8, 1, 1, 6, 2, 2, 2, 0, 7, 2, 9, 7, 7, 1, 8, 6, 1, 5, 8, 2, 3, 6, 6, 7, 8, 4, 2, 4, 6, 8, 9, 1, 5, 7, 9, 9, 3, 5, 3, 2, 9, 6, 1, 9, 2, 2}  ,
{  6, 2, 4, 6, 7, 9, 5, 7, 1, 9, 4, 4, 0, 1, 2, 6, 9, 0, 4, 3, 8, 7, 7, 1, 0, 7, 2, 7, 5, 0, 4, 8, 1, 0, 2, 3, 9, 0, 8, 9, 5, 5, 2, 3, 5, 9, 7, 4, 5, 7}  ,
{  2, 3, 1, 8, 9, 7, 0, 6, 7, 7, 2, 5, 4, 7, 9, 1, 5, 0, 6, 1, 5, 0, 5, 5, 0, 4, 9, 5, 3, 9, 2, 2, 9, 7, 9, 5, 3, 0, 9, 0, 1, 1, 2, 9, 9, 6, 7, 5, 1, 9}  ,
{  8, 6, 1, 8, 8, 0, 8, 8, 2, 2, 5, 8, 7, 5, 3, 1, 4, 5, 2, 9, 5, 8, 4, 0, 9, 9, 2, 5, 1, 2, 0, 3, 8, 2, 9, 0, 0, 9, 4, 0, 7, 7, 7, 0, 7, 7, 5, 6, 7, 2}  ,
{  1, 1, 3, 0, 6, 7, 3, 9, 7, 0, 8, 3, 0, 4, 7, 2, 4, 4, 8, 3, 8, 1, 6, 5, 3, 3, 8, 7, 3, 5, 0, 2, 3, 4, 0, 8, 4, 5, 6, 4, 7, 0, 5, 8, 0, 7, 7, 3, 0, 8}  ,
{  8, 2, 9, 5, 9, 1, 7, 4, 7, 6, 7, 1, 4, 0, 3, 6, 3, 1, 9, 8, 0, 0, 8, 1, 8, 7, 1, 2, 9, 0, 1, 1, 8, 7, 5, 4, 9, 1, 3, 1, 0, 5, 4, 7, 1, 2, 6, 5, 8, 1}  ,
{  9, 7, 6, 2, 3, 3, 3, 1, 0, 4, 4, 8, 1, 8, 3, 8, 6, 2, 6, 9, 5, 1, 5, 4, 5, 6, 3, 3, 4, 9, 2, 6, 3, 6, 6, 5, 7, 2, 8, 9, 7, 5, 6, 3, 4, 0, 0, 5, 0, 0}  ,
{  4, 2, 8, 4, 6, 2, 8, 0, 1, 8, 3, 5, 1, 7, 0, 7, 0, 5, 2, 7, 8, 3, 1, 8, 3, 9, 4, 2, 5, 8, 8, 2, 1, 4, 5, 5, 2, 1, 2, 2, 7, 2, 5, 1, 2, 5, 0, 3, 2, 7}  ,
{  5, 5, 1, 2, 1, 6, 0, 3, 5, 4, 6, 9, 8, 1, 2, 0, 0, 5, 8, 1, 7, 6, 2, 1, 6, 5, 2, 1, 2, 8, 2, 7, 6, 5, 2, 7, 5, 1, 6, 9, 1, 2, 9, 6, 8, 9, 7, 7, 8, 9}  ,
{  3, 2, 2, 3, 8, 1, 9, 5, 7, 3, 4, 3, 2, 9, 3, 3, 9, 9, 4, 6, 4, 3, 7, 5, 0, 1, 9, 0, 7, 8, 3, 6, 9, 4, 5, 7, 6, 5, 8, 8, 3, 3, 5, 2, 3, 9, 9, 8, 8, 6}  ,
{  7, 5, 5, 0, 6, 1, 6, 4, 9, 6, 5, 1, 8, 4, 7, 7, 5, 1, 8, 0, 7, 3, 8, 1, 6, 8, 8, 3, 7, 8, 6, 1, 0, 9, 1, 5, 2, 7, 3, 5, 7, 9, 2, 9, 7, 0, 1, 3, 3, 7}  ,
{  6, 2, 1, 7, 7, 8, 4, 2, 7, 5, 2, 1, 9, 2, 6, 2, 3, 4, 0, 1, 9, 4, 2, 3, 9, 9, 6, 3, 9, 1, 6, 8, 0, 4, 4, 9, 8, 3, 9, 9, 3, 1, 7, 3, 3, 1, 2, 7, 3, 1}  ,
{  3, 2, 9, 2, 4, 1, 8, 5, 7, 0, 7, 1, 4, 7, 3, 4, 9, 5, 6, 6, 9, 1, 6, 6, 7, 4, 6, 8, 7, 6, 3, 4, 6, 6, 0, 9, 1, 5, 0, 3, 5, 9, 1, 4, 6, 7, 7, 5, 0, 4}  ,
{  9, 9, 5, 1, 8, 6, 7, 1, 4, 3, 0, 2, 3, 5, 2, 1, 9, 6, 2, 8, 8, 9, 4, 8, 9, 0, 1, 0, 2, 4, 2, 3, 3, 2, 5, 1, 1, 6, 9, 1, 3, 6, 1, 9, 6, 2, 6, 6, 2, 2}  ,
{  7, 3, 2, 6, 7, 4, 6, 0, 8, 0, 0, 5, 9, 1, 5, 4, 7, 4, 7, 1, 8, 3, 0, 7, 9, 8, 3, 9, 2, 8, 6, 8, 5, 3, 5, 2, 0, 6, 9, 4, 6, 9, 4, 4, 5, 4, 0, 7, 2, 4}  ,
{  7, 6, 8, 4, 1, 8, 2, 2, 5, 2, 4, 6, 7, 4, 4, 1, 7, 1, 6, 1, 5, 1, 4, 0, 3, 6, 4, 2, 7, 9, 8, 2, 2, 7, 3, 3, 4, 8, 0, 5, 5, 5, 5, 6, 2, 1, 4, 8, 1, 8}  ,
{  9, 7, 1, 4, 2, 6, 1, 7, 9, 1, 0, 3, 4, 2, 5, 9, 8, 6, 4, 7, 2, 0, 4, 5, 1, 6, 8, 9, 3, 9, 8, 9, 4, 2, 2, 1, 7, 9, 8, 2, 6, 0, 8, 8, 0, 7, 6, 8, 5, 2}  ,
{  8, 7, 7, 8, 3, 6, 4, 6, 1, 8, 2, 7, 9, 9, 3, 4, 6, 3, 1, 3, 7, 6, 7, 7, 5, 4, 3, 0, 7, 8, 0, 9, 3, 6, 3, 3, 3, 3, 0, 1, 8, 9, 8, 2, 6, 4, 2, 0, 9, 0}  ,
{  1, 0, 8, 4, 8, 8, 0, 2, 5, 2, 1, 6, 7, 4, 6, 7, 0, 8, 8, 3, 2, 1, 5, 1, 2, 0, 1, 8, 5, 8, 8, 3, 5, 4, 3, 2, 2, 3, 8, 1, 2, 8, 7, 6, 9, 5, 2, 7, 8, 6}  ,
{  7, 1, 3, 2, 9, 6, 1, 2, 4, 7, 4, 7, 8, 2, 4, 6, 4, 5, 3, 8, 6, 3, 6, 9, 9, 3, 0, 0, 9, 0, 4, 9, 3, 1, 0, 3, 6, 3, 6, 1, 9, 7, 6, 3, 8, 7, 8, 0, 3, 9}  ,
{  6, 2, 1, 8, 4, 0, 7, 3, 5, 7, 2, 3, 9, 9, 7, 9, 4, 2, 2, 3, 4, 0, 6, 2, 3, 5, 3, 9, 3, 8, 0, 8, 3, 3, 9, 6, 5, 1, 3, 2, 7, 4, 0, 8, 0, 1, 1, 1, 1, 6}  ,
{  6, 6, 6, 2, 7, 8, 9, 1, 9, 8, 1, 4, 8, 8, 0, 8, 7, 7, 9, 7, 9, 4, 1, 8, 7, 6, 8, 7, 6, 1, 4, 4, 2, 3, 0, 0, 3, 0, 9, 8, 4, 4, 9, 0, 8, 5, 1, 4, 1, 1}  ,
{  6, 0, 6, 6, 1, 8, 2, 6, 2, 9, 3, 6, 8, 2, 8, 3, 6, 7, 6, 4, 7, 4, 4, 7, 7, 9, 2, 3, 9, 1, 8, 0, 3, 3, 5, 1, 1, 0, 9, 8, 9, 0, 6, 9, 7, 9, 0, 7, 1, 4}  ,
{  8, 5, 7, 8, 6, 9, 4, 4, 0, 8, 9, 5, 5, 2, 9, 9, 0, 6, 5, 3, 6, 4, 0, 4, 4, 7, 4, 2, 5, 5, 7, 6, 0, 8, 3, 6, 5, 9, 9, 7, 6, 6, 4, 5, 7, 9, 5, 0, 9, 6}  ,
{  6, 6, 0, 2, 4, 3, 9, 6, 4, 0, 9, 9, 0, 5, 3, 8, 9, 6, 0, 7, 1, 2, 0, 1, 9, 8, 2, 1, 9, 9, 7, 6, 0, 4, 7, 5, 9, 9, 4, 9, 0, 1, 9, 7, 2, 3, 0, 2, 9, 7}  ,
{  6, 4, 9, 1, 3, 9, 8, 2, 6, 8, 0, 0, 3, 2, 9, 7, 3, 1, 5, 6, 0, 3, 7, 1, 2, 0, 0, 4, 1, 3, 7, 7, 9, 0, 3, 7, 8, 5, 5, 6, 6, 0, 8, 5, 0, 8, 9, 2, 5, 2}  ,
{  1, 6, 7, 3, 0, 9, 3, 9, 3, 1, 9, 8, 7, 2, 7, 5, 0, 2, 7, 5, 4, 6, 8, 9, 0, 6, 9, 0, 3, 7, 0, 7, 5, 3, 9, 4, 1, 3, 0, 4, 2, 6, 5, 2, 3, 1, 5, 0, 1, 1}  ,
{  9, 4, 8, 0, 9, 3, 7, 7, 2, 4, 5, 0, 4, 8, 7, 9, 5, 1, 5, 0, 9, 5, 4, 1, 0, 0, 9, 2, 1, 6, 4, 5, 8, 6, 3, 7, 5, 4, 7, 1, 0, 5, 9, 8, 4, 3, 6, 7, 9, 1}  ,
{  7, 8, 6, 3, 9, 1, 6, 7, 0, 2, 1, 1, 8, 7, 4, 9, 2, 4, 3, 1, 9, 9, 5, 7, 0, 0, 6, 4, 1, 9, 1, 7, 9, 6, 9, 7, 7, 7, 5, 9, 9, 0, 2, 8, 3, 0, 0, 6, 9, 9}  ,
{  1, 5, 3, 6, 8, 7, 1, 3, 7, 1, 1, 9, 3, 6, 6, 1, 4, 9, 5, 2, 8, 1, 1, 3, 0, 5, 8, 7, 6, 3, 8, 0, 2, 7, 8, 4, 1, 0, 7, 5, 4, 4, 4, 9, 7, 3, 3, 0, 7, 8}  ,
{  4, 0, 7, 8, 9, 9, 2, 3, 1, 1, 5, 5, 3, 5, 5, 6, 2, 5, 6, 1, 1, 4, 2, 3, 2, 2, 4, 2, 3, 2, 5, 5, 0, 3, 3, 6, 8, 5, 4, 4, 2, 4, 8, 8, 9, 1, 7, 3, 5, 3}  ,
{  4, 4, 8, 8, 9, 9, 1, 1, 5, 0, 1, 4, 4, 0, 6, 4, 8, 0, 2, 0, 3, 6, 9, 0, 6, 8, 0, 6, 3, 9, 6, 0, 6, 7, 2, 3, 2, 2, 1, 9, 3, 2, 0, 4, 1, 4, 9, 5, 3, 5}  ,
{  4, 1, 5, 0, 3, 1, 2, 8, 8, 8, 0, 3, 3, 9, 5, 3, 6, 0, 5, 3, 2, 9, 9, 3, 4, 0, 3, 6, 8, 0, 0, 6, 9, 7, 7, 7, 1, 0, 6, 5, 0, 5, 6, 6, 6, 3, 1, 9, 5, 4}  ,
{  8, 1, 2, 3, 4, 8, 8, 0, 6, 7, 3, 2, 1, 0, 1, 4, 6, 7, 3, 9, 0, 5, 8, 5, 6, 8, 5, 5, 7, 9, 3, 4, 5, 8, 1, 4, 0, 3, 6, 2, 7, 8, 2, 2, 7, 0, 3, 2, 8, 0}  ,
{  8, 2, 6, 1, 6, 5, 7, 0, 7, 7, 3, 9, 4, 8, 3, 2, 7, 5, 9, 2, 2, 3, 2, 8, 4, 5, 9, 4, 1, 7, 0, 6, 5, 2, 5, 0, 9, 4, 5, 1, 2, 3, 2, 5, 2, 3, 0, 6, 0, 8}  ,
{  2, 2, 9, 1, 8, 8, 0, 2, 0, 5, 8, 7, 7, 7, 3, 1, 9, 7, 1, 9, 8, 3, 9, 4, 5, 0, 1, 8, 0, 8, 8, 8, 0, 7, 2, 4, 2, 9, 6, 6, 1, 9, 8, 0, 8, 1, 1, 1, 9, 7}  ,
{  7, 7, 1, 5, 8, 5, 4, 2, 5, 0, 2, 0, 1, 6, 5, 4, 5, 0, 9, 0, 4, 1, 3, 2, 4, 5, 8, 0, 9, 7, 8, 6, 8, 8, 2, 7, 7, 8, 9, 4, 8, 7, 2, 1, 8, 5, 9, 6, 1, 7}  ,
{  7, 2, 1, 0, 7, 8, 3, 8, 4, 3, 5, 0, 6, 9, 1, 8, 6, 1, 5, 5, 4, 3, 5, 6, 6, 2, 8, 8, 4, 0, 6, 2, 2, 5, 7, 4, 7, 3, 6, 9, 2, 2, 8, 4, 5, 0, 9, 5, 1, 6}  ,
{  2, 0, 8, 4, 9, 6, 0, 3, 9, 8, 0, 1, 3, 4, 0, 0, 1, 7, 2, 3, 9, 3, 0, 6, 7, 1, 6, 6, 6, 8, 2, 3, 5, 5, 5, 2, 4, 5, 2, 5, 2, 8, 0, 4, 6, 0, 9, 7, 2, 2} ,
{  5, 3, 5, 0, 3, 5, 3, 4, 2, 2, 6, 4, 7, 2, 5, 2, 4, 2, 5, 0, 8, 7, 4, 0, 5, 4, 0, 7, 5, 5, 9, 1, 7, 8, 9, 7, 8, 1, 2, 6, 4, 3, 3, 0, 3, 3, 1, 6, 9, 0}
};

for (int y = 49; y >= 0; y --)
{

    num = 0;

    for (int x = 0; x < 100; x ++)
    {

        num += digits[x][y];

    }

    carry[column] = num;
    column --;

}

for (column= 49; column >= 1; column --)
{
    answer[row] = carry[column] % 10;
    carry[column] /= 10;
    carry[column-1] += carry[column];
    row--;
}

answer[row] = carry[0];

	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |       The first ten digits of the sum of the following       |"<<endl;
	cout<<"       |                 one-hundred 50 digit number is               |"<<endl;
	cout<<"       |                        ";


for (row = 0; row <8; row++)
{
	 cout<<answer[row];

}

	cout<<"                            |"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |**************************************************************|\n\n";


}

void Project::longest_collatz_sequence()//PROBLEM NO.14
{

	long long currentSeq = 0;
	long long longestSeq = 0;
	long long start = 0;

	//cout << "test\n";

    for (int i = 1; i < 1000000; i++)
    {
        //cout << i << ": ";
        currentSeq = m_longest_collatz_sequence(i);

        if (currentSeq > longestSeq)
        {
            start = i;
            longestSeq = currentSeq;
        }
        //cout<<currentSeq <<endl;

    }
	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |       The starting number under one million that produces    |"<<endl;
	cout<<"       |                 the longest chain is "<< start  << "                  |"<<endl;
	cout<<"       |**************************************************************|\n\n";





}


int Project::m_longest_collatz_sequence(int value)//PROBLEM NO.14
{
	unsigned long n = value;
    long long counter = 1;
    while (n != 1) {
        if (n%2==0)
        {
            n = n/2;
            counter++;
        }

        else {
            n = (3*n) + 1;
            counter++;
        }
        }
        return counter;
}


void Project::m_diophantine_reciprocals_a (int n)
{
	int	i, j;
	for (i = 2; i * i <= n; i++)
	{
		if (composite[i])
			continue;
		for (j = 2 * i; j <= n; j += i)
			composite[j] = 1;
		primes.push_back(i);
	}
	for (; i <= n; i++)
		if (!composite[i])
			primes.push_back(i);
}

void Project::diophantine_reciprocals_a()//POBLEM NO.15
{


m_diophantine_reciprocals_a(MAX);


	for (int N = 1000; N < MAX; N++)
	{
		if (!composite[N])
			continue;
		int numdiv = 1, cn = N;
		for (unsigned i = 0; 1 != cn && i < primes.size(); i++)
		{
			int	count = 0;
			while (cn % primes[i] == 0)
			{
				cn /= primes[i];
				count++;
			}
			numdiv *= (count * 2 + 1);
		}
		int ans = (numdiv + 1) / 2;
		if (ans > LIMIT)
		{
			cout<<"\n\n\n       |**************************************************************|"<<endl;
			cout<<"       |                                                              |"<<endl;
			cout<<"       |     The least value of n for which the number of distinct    |"<<endl;
			cout<<"       |              solutions exceeds one- thousand is "<<N <<"       |"<< endl;
			cout<<"       |**************************************************************|\n\n";
			break;
		}
	}
}

void Project::power_digit_sum()//PROBLEM NO.16
{


    x[301]=2;
	for (short power=1;power!=1000;power++)
	{
		for (short arraynum=301;arraynum!=0;arraynum--)
		{
			x[arraynum]=x[arraynum] * 2;
		}

		for (short arraynum=301;arraynum!=0;arraynum--)
		{
			if (x[arraynum]>9)
			{
				x[arraynum]=x[arraynum]-10;
				x[arraynum-1]=x[arraynum-1]+1;
			}
		}

	}

	int sum=0;

		for (short arraynum=301;arraynum!=-1;arraynum--)
		{
			sum = sum +x[arraynum];
		}
		cout<<"\n\n\n       |**************************************************************|"<<endl;
		cout<<"       |                                                              |"<<endl;
		cout<<"       |       The sum of the digits of the number 2^1000 is "<<sum<<"     |"<<endl;
		cout<<"       |                                                              |"<<endl;
		cout<<"       |**************************************************************|\n\n";




}

void Project::number_letter_counts()//PROBLEM NO.17
{
    int sum=0,n=0;

        for(int i=0;i<10001;i++)
        {
            n=i;

            if(n==1000)
            {
                sum=sum+11;
                n=1000;
            }


            if(n>=100&&n<200)
            {
                sum=sum+10;
                if(n>100)
                    sum=sum+3;
                n=n-100;
            }
            else if(n>=200&&n<300)
            {
                sum=sum+10;
                if(n>200)
                    sum=sum+3;
                n=n-200;
            }
            else if(n>=300&&n<400)
            {
                sum=sum+12;
                if(n>300)
                    sum=sum+3;
                n=n-300;
            }
            else if(n>=400&&n<500)
            {
                sum=sum+11;
                if(n>400)
                    sum=sum+3;
                n=n-400;
            }
            else if(n>=500&&n<600)
            {
                sum=sum+11;
                if(n>500)
                    sum=sum+3;
                n=n-500;
            }
            else if(n>=600&&n<700)
            {
                sum=sum+10;
                if(n>600)
                    sum=sum+3;
                n=n-600;
            }
            else if(n>=700&&n<800)
            {
                sum=sum+12;
                if(n>700)
                    sum=sum+3;
                n=n-700;
            }
            else if(n>=800&&n<900)
            {
                sum=sum+12;
                if(n>800)
                    sum=sum+3;
                n=n-800;
            }
            else if(n>=900&&n<1000)
            {
                sum=sum+11;
                if(n>900)
                    sum=sum+3;
                n=n-900;
            }



            if(n>=20&&n<30)
            {
                sum=sum+6;
                n=n-20;
            }
            else if(n>=30&&n<40)
            {
                sum=sum+6;
                n=n-30;
            }
            else if(n>=40&&n<50)
            {
                sum=sum+5;
                n=n-40;
            }
            else if(n>=50&&n<60)
            {
                sum=sum+5;
                n=n-50;
            }
            else if(n>=60&&n<70)
            {
                sum=sum+5;
                n=n-60;
            }
            else if(n>=70&&n<80)
            {
                sum=sum+7;
                n=n-70;
            }
            else if(n>=80&&n<90)
            {
                sum=sum+6;
                n=n-80;
            }
            else if(n>=90&&n<100)
            {
                sum=sum+6;
                n=n-90;
            }

            //for ones
            if(n==1||n==2||n==6||n==10)
                sum = sum+3;
            else if(n==4||n==5||n==9)
                sum = sum+4;
            else if(n==3||n==7||n==8)
                sum = sum+5;
            else if(n==11||n==12)
                sum = sum+6;
            else if(n==15||n==16)
                sum = sum+7;
            else if(n==13||n==14||n==18||n==19)
                sum = sum+8;
            else if(n==17)
                sum = sum+9;
        }
        cout<<"\n\n\n       |**************************************************************|"<<endl;
        cout<<"       |                                                              |"<<endl;
        cout<<"       |       All the numbers from 1 to 1000 are written "<<sum<<"       |"<<endl;
        cout<<"       |                                                              |"<<endl;
        cout<<"       |**************************************************************|\n\n";
}

void Project::max_path_sum_one()//PROBLEM NO.18
{
	int row_lim = 14;
	int triangle[15][15] = {
		{75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{95, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{17, 47, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{18, 35, 87, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{20, 4, 82, 47, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{19, 1, 23, 75, 3, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{88, 2, 77, 73, 7, 63, 67, 0, 0, 0, 0, 0, 0, 0, 0},
		{99, 65, 4, 28, 6, 16, 70, 92, 0, 0, 0, 0, 0, 0, 0},
		{41, 41, 26, 56, 83, 40, 80, 70, 33, 0, 0, 0, 0, 0, 0},
		{41, 48, 72, 33, 47, 32, 37, 16, 94, 29, 0, 0, 0, 0, 0},
		{53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14, 0, 0, 0, 0},
		{70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57, 0, 0, 0},
		{91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48, 0, 0},
		{63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31, 0},
		{4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 04, 23,}
		};



	for(int i = 14; i > 0; i--, row_lim--)
	{
		for(int j = 0; j < i; j++)
		{
			if(triangle[i][j] > triangle[i][j + 1])
			{
				triangle[i - 1][j] += triangle[i][j];
			}
			else
			{
				triangle[i - 1][j] += triangle[i][j + 1];
			}
		}
	}
	cout<<"\n\n\n       |**************************************************************|"<<endl;
	cout<<"       |                                                              |"<<endl;
	cout<<"       |    The maximum total from top to bottom of the triangle is   |"<<endl;
	cout<<"       |                            " << triangle[0][0]<<"                              |"<<endl;
	cout<<"       |**************************************************************|\n\n";

}



	bool IsLeap(int year)
{
    if ((year % 4 == 0) && (year % 100 != 0 || year % 400 == 0))
    {
        return true;
    }
    return false;
}

enum Days
{
    Sunday = 0, Monday, Tuesday, Wednesday, Thirsday, Friday, Saturday
};

void Project::counting_sundays()//PROBLEM NO.19
{
	int const months = 12;
	int const days = 7;
	int days_in_month[months] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };


	int const start_date = 1900;
	int const end_date = 2001;


	int const start_day = ((static_cast<int>(Monday) + 365) + (IsLeap(start_date) ? + 1 : 0)) % days;
	int sundays = ((0 == start_date % days) ? 1 : 0);


	int nextMonthDay = start_date;

	for (int i = start_date + 1; i < end_date; ++i)
		{
			for (int j = 0; j < months; ++j)
				{
					//  for the month of february
					if (1 == j && IsLeap(i))
					{
							nextMonthDay += 1;
					}

					nextMonthDay = (nextMonthDay + days_in_month[j]) % days;

					if (Sunday == nextMonthDay)
					{
						++sundays;
					}
				}
		}


    cout<<"\n\n\n       |**************************************************************|"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |      There are "<<sundays <<" sundays that fell on the first month      |"<<endl;
    cout<<"       |   during the twentieth century ( 1 Jan 1901 to 31 Dec 2000)  |"<<endl;
    cout<<"       |**************************************************************|\n\n";

}

void Project::factorial_digit_sum()//PROBLEM NO.20
{
	int n = 100;

  int factorial[DIGIT_COUNT];

  factorial[0] = 1;
  for (int i = 1; i < DIGIT_COUNT; i++)
    { factorial[i] = 0; }

  for (int i = 2; i < n; i++)
    {   int carry = 0;
        for (int j = 0; j < DIGIT_COUNT; j++) {
            int digit = factorial[j];
            digit = digit * i;
            digit = digit + carry;
            factorial[j] = digit % 10;
            carry = digit / 10;
        }
    }

  int factorialum = 0;

  for (int i = 0; i < DIGIT_COUNT; i++)
    { factorialum += factorial[i]; }
    cout<<"\n\n\n       |**************************************************************|"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |        The sum of the digits in the number 100! is  " << factorialum<<"      |"<<endl;
    cout<<"       |                                                              |"<<endl;
    cout<<"       |**************************************************************|\n\n";


}

void  Project::name_scores()//PROBLEM NO.21
{

    fstream myfile("names.txt");
    string line, key;
    string temp = "";
    string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    int rank_Range = alphabet.length();
    getline(myfile, line);
    int range = line.length();
    int arraySize = 1;
    int indexNum = 0;
    int letterSum = 0, product = 0, namesRank = 0;
    unsigned long total = 0;

    for (int i = 0; i < range; i++) {
        if (line.at(i) == ',') {
            arraySize++;
        }
    }

    string names[arraySize];

    for (int j = 1; j < range; j++) {
        if (line.at(j) == '"' || line.at(j) == ',') {
            if (temp != "") {
                names[indexNum] = temp;
                temp = "";
                indexNum++;
            }
            continue;
        }
        temp += line.at(j);
    }


    for (int i = 0; i < arraySize; i++) {
        int j;
        for (j = i+1; j < arraySize; j++) {
            if (names[i] > names[j]) {
                key = names[j];
                names[j] = names[i];
                names[i] = key;
            }
        }
   }

   for (int i = 0; i < arraySize; i++) {
        letterSum = 0;
        namesRank = i+1;
        int namesRange = names[i].length();
        for (int j = 0; j < namesRange; j++) {
            for (int k = 0; k < rank_Range; k++) {
                if (names[i].at(j) == alphabet.at(k))
                {
                    letterSum += k + 1;
                    break;
                }
            }
        }
        product = namesRank*letterSum;
        total += product;
   }



   /*for (int i = 0; i < arraySize; i++) {
    cout << names[i] << " ";
   }*/
   cout<<"\n\n\n       |**************************************************************|"<<endl;
   cout<<"       |                                                              |"<<endl;
   cout<<"       |  The total of all the name scores in the file is " << total << "   |"<<endl;
   cout<<"       |                                                              |"<<endl;
   cout<<"       |**************************************************************|\n\n";

}






